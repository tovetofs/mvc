{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="report-main">
        <div class="report-head">
            <h1>Redovisning</h1>
        </div>

        <div class="report-head">
            <div class="line-circles">
                <div class="circle-1"></div>
                <div class="circle-2"></div>
                <div class="circle-3"></div>
                <div class="circle-4"></div>
                <div class="circle-3"></div>
                <div class="circle-2"></div>
                <div class="circle-1"></div>
            </div>
        </div>

        <div class="report-text" id="kmom01">
            <h2>Kmom01 - Ramverk</h2>
            <p>Mina förkunskaper inom objektorienterad programmering begränsar sig till det vi 
                lärde oss i OOPython-kursen.</p>
            <p>En klass är en mall som man kan använda för att skapa objekt, som alltså blir en instans 
                av klassen. Ett objekt har properties som är variabler som hör till objektet (som anger 
                objektets state). Ett objekt har också methods (funktioner) som delas av alla objekt av 
                en viss klass. Objekt kan användas för inkapsling. Properties och metoder kan vara 
                publika, privata eller protected.</p>
            <p>Struktureringen av koden i report liknar andra ramverk som vi tidigare har arbetat med, Pico, 
                Flask och Express. Det känns bekant med routes och template-filer, publika resurser och 
                katalog för test och src. Symfony verkar dock mycket mer komplext. Har försökt följa hur 
                flödet skulle gå vid ett inkommande request, men tycker det är svårt. Hur 
                objektorientering ska implementeras i ramverket känns också knepigt. Vissa saker förstår 
                jag inte alls som autoloader och use. Namespace förstår jag på ett teoretiskt plan, men 
                inte hur man ska implementera det. </p>
            <p>'PHP The right way' tycker jag var ganska svår att förstå. Biten om databaser känns ju 
                användbar och delarna om säkerhet och testning verkar viktigt. Hur man arbetar med datum 
                verkar också användbart.</p>
            <p>Mitt TIL den här veckan är hur man installerar Symfony och hur man skapar en klass i PHP.
            </p>
            
        </div>

        <div class="report-side">
            <img class="report-img" src="{{ asset('img/bird1.jpg') }}" alt="Bird">
            <div class="report-side-text">
                <p><a href="{{ path('api/quote') }}">Dagens citat (Route api/quote)</a></p>
            </div>
            <img class="report-img" src="{{ asset('img/bird2.jpg') }}" alt="Bird">
            <div class="report-side-text">
                <p><a href="{{ path('lucky') }}">Lucky (Route lucky)</a></p>
            </div>
        </div>

        <div class="report-head">
            <div class="line-circles">
                <div class="circle-1"></div>
                <div class="circle-2"></div>
                <div class="circle-3"></div>
                <div class="circle-4"></div>
                <div class="circle-3"></div>
                <div class="circle-2"></div>
                <div class="circle-1"></div>
            </div>
        </div>

        <div class="report-side2">
            <img class="report-img" src="{{ asset('img/bird3.jpg') }}" alt="Bird">
            <div class="report-side-text">
                <p><a href="{{ path('api') }}">Api landningssida</a></p>
            </div>
            <img class="report-img" src="{{ asset('img/bird4.jpg') }}" alt="Bird">
            <div class="report-side-text">
                <p><a href="{{ path('card') }}">Kortleken</a></p>
            </div>
            <img class="report-img" src="{{ asset('img/bird5.jpg') }}" alt="Bird">
        </div>


        <div class="report-text2" id="kmom02">
            <h2>Kmom02 - Objektorientering</h2>
            <p>Arv innebär en form av specialisering. En subklass kommer att ärva alla publika och
                protected metoder och properties från en basklass och kan i tillägg till det ha
                egna metoder och properties. Från basklassen kommer man däremot inte åt metoder och
                properties i subklassen. Nyckelordet 'extends' används i PHP för att visa att en
                klass ärver från en annan.</p>
            <p>Komposition innebär att en klass innehåller en annan klass,  t ex ett hus innehåller
                rum och dessa kan inte existera utanför huset.</p>
            <p>Interface innebär en form av kontrakt. Interfacet visar vilka metoder en klass ska
                implementera, alla metoder som finns i interfacet lovar man alltså att uppfylla.
                Nyckelordet 'interface' används för att specificera interfacet och 'implements'
                används av de klasser som vill använda interfacet.</p>
            <p>Trait innebär att man skapar moduler av kod som kan användas av flera klasser, det kan
                vara metoder och medlemsvariabler. Trait kan man använda istället för multipelt arv,
                som inte går att använda i PHP. De deklareras med nyckelordet 'trait' och inuti klassen
                som ska använda ett visst trait skriver man 'use TraitName'.</p>
            <p>Till uppgiften skapade jag de fyra klasser som rekommenderades. Jag är nöjd med klasserna
                jag skapade, jag tycker att de blev ganska lättöverskådliga. Använde en JSON-fil för att
                hålla information om korten som ska skapas och den användes sedan i DeckOfCards
                konstruktor för att skapa korten, men det finns kanske något bättre sätt att lösa det
                på. En svårighet var att skriva ut utf8-tecknet på sidan, skapade klassen CardGraphic
                för att lösa det, men såg att det fanns en bättre lösning i guiden som jag använde
                istället. Framöver skulle jag kunna använda CardGraphic om jag vill implementera
                bilder. En annan svårighet var att sortera korten i rätt ordning, löste det genom att
                skapa medlemsvariabeln value som är en siffra. </p>
            <p>Flödesdiagram och pseudokod använde jag inte för den här uppgiften, men när uppgifterna
                blir mer komplexa tror jag det är väldigt användbart.</p>
            <p>Mitt TIL den här veckan är hur arv, trait och interface fungerar i PHP och hur man
                använder sessionen i symfony.</p>

        </div>

        <div class="report-head">
            <div class="line-circles">
                <div class="circle-1"></div>
                <div class="circle-2"></div>
                <div class="circle-3"></div>
                <div class="circle-4"></div>
                <div class="circle-3"></div>
                <div class="circle-2"></div>
                <div class="circle-1"></div>
            </div>
        </div>

        <div class="report-text" id="kmom03">
            <h2>Kmom03 - Applikation</h2>
            <p>Till uppgiften valde jag att göra patiensspelet Poker squares. När jag byggde spelet 
                använde jag mig av någon sorts bottom-up approach. Jag började att bryta ut små delar, 
                fick dem att fungera och byggde sedan på mer efterhand. Första steget blev till exempel 
                att göra en klass som håller en spelplan med 5x5 tomma rutor och skriva ut dem på 
                sidan. Sedan lade jag till en metod för att placera ut ett kort på spelplanen. Nästa 
                steg blev att göra en POST-route för att placera kortet, sedan spara spelplanen i 
                sessionen, dirigera tillbaka till play-routen och ta fram spelplanen igen från sessionen. 
                Efter detta skrev jag reglerna och till sist klassen som loopar igenom rader och kolumner, 
                testar mot reglerna och skriver ut poängen. Till enskilda delar tog jag hjälp av 
                pseudokod. Lite förenklat flödesschema skriver jag ofta, men pseudokod har jag inte använt 
                tidigare.</p>

            <p>Jag tycker att det inte är helt lätt att veta vad som bör vara enskilda klasser. Jag 
                valde ett upplägg med liknande klasser som i Yahtzee-uppgiften från OOPython-kursen 
                med en klass för spelplanen, en som räknar ut poängställningen och en för reglerna. 
                I GamePlan finns en multidimensionell array som håller tomma slottar eller kort för 
                rutorna på spelplanen. ScoreBoard återskapas i play-routen efter varje placerat kort. 
                Den innehåller metoder för att räkna ut poängen för varje rad och kolumn och dessa 
                sparas sedan i två arrayer. I GameRules finns endast reglerna. Jag ändrade en del i 
                klasserna jag skapade till kmom02, till exempel skapar jag kortleken utifrån två 
                arrayer med färg respektive värde istället för att använda json-filen.</p>
            <p>Jag tycker att mina klasser blev bra men kanske hade det gått att dela upp i fler 
                klasser? Det hade nog också varit bra att dela upp en del stora metoder i fler mindre. 
                Jag tycker att min kontroller-fil blev så slimmad som det går. Däremot blev det ganska 
                mycket logik i template-filen, med två nestlade for-loopar för att rita ut spelplanen, 
                så detta hade jag jobbat mer med om jag hade haft mer tid. Nästa gång ska jag försöka 
                använda en lite mer top-down approach, planera lite mer på förhand hur jag ska lösa 
                uppgiften och prova att använda flödesscheman ännu mer.</p>
            <p>När jag testade phpmd fick en av mina metoder i regel-klassen Cyclomatic Complexity på 10 
                så den delade jag upp i två metoder. Fick också problem med onödiga else-satser och dessa 
                kunde jag arrangera om. Ett problem kunde jag inte lösa. Fick missing class import där 
                jag använde ett exception. PHP STAN klarade jag till och med nivå 8. </p>
            <p>Gillar uppdelningen av template-filer, kontroller-filer och applikations-kod i Symfony. 
                Verkar ju smart att ha själva applikations-koden separat så man kan flytta den till ett 
                annat ramverk om man skulle vilja. </p>
            <p>TIL den här veckan är hur man använder PHPStan och PHPMD, vad SOLID och Liskovs 
                substitutionsprincip är. Föreläsningen om problemlösning var riktigt intressant!</p>
        </div>

        <div class="report-side">
            <img class="report-img" src="{{ asset('img/bird6.jpg') }}" alt="Bird">
            <div class="report-side-text">
                <p><a href="{{ path('game') }}">Kortspelet (Poker squares)</a></p>
            </div>
            <img class="report-img" src="{{ asset('img/bird10.jpg') }}" alt="Bird">
            <div class="report-side-text">
                <p><a href="{{ path('api') }}">Api landningssida</a></p>
            </div>
            <img class="report-img" src="{{ asset('img/bird9.jpg') }}" alt="Bird">
        </div>

    </div>
    
    
{% endblock %}
